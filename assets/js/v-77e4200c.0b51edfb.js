"use strict";(self.webpackChunkfixture_riveter=self.webpackChunkfixture_riveter||[]).push([[631],{7065:(n,a,s)=>{s.r(a),s.d(a,{data:()=>t});const t={key:"v-77e4200c",path:"/notes/differences-from-factory-bot.html",title:"Differences from factory_bot",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Async",slug:"async",children:[]}],filePathRelative:"notes/differences-from-factory-bot.md"}},119:(n,a,s)=>{s.r(a),s.d(a,{default:()=>F});var t=s(6252);const e=(0,t._)("h1",{id:"differences-from-factory-bot",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#differences-from-factory-bot","aria-hidden":"true"},"#"),(0,t.Uk)(" Differences from factory_bot")],-1),o=(0,t.Uk)("As noted in the README, the primary source of inspiration is "),p={href:"https://github.com/thoughtbot/factory_bot/",target:"_blank",rel:"noopener noreferrer"},i=(0,t.Uk)("factory_bot"),c=(0,t.Uk)(". After attempting to use many of the similar libraries that exist in the javascript world, I grew annoyed at the lack of features and robust internal design. I also didn't have much Typescript experience and viewed the chance to convert an existing library to TS would be a fantastic learning opportunity."),r=(0,t.Uk)("This library diverges from "),l={href:"https://github.com/thoughtbot/factory_bot/",target:"_blank",rel:"noopener noreferrer"},u=(0,t.Uk)("factory_bot"),k=(0,t.Uk)(" in a couple major ways. First, "),h={href:"https://github.com/thoughtbot/factory_bot/",target:"_blank",rel:"noopener noreferrer"},d=(0,t.Uk)("factory_bot"),f=(0,t.Uk)(" relies heavily on Ruby's metaprogramming capabilities, "),m=(0,t._)("code",null,"instance_exec",-1),b=(0,t.Uk)(", "),g=(0,t._)("code",null,"method_missing",-1),y=(0,t.Uk)(", and "),_=(0,t._)("code",null,"define_method",-1),v=(0,t.Uk)('. Second, Ruby (and Rails alongside it) are synchronous, which means that there is no consideration for awaiting calls to a database or performing assignments "out of order". And finally, '),w={href:"https://github.com/thoughtbot/factory_bot/",target:"_blank",rel:"noopener noreferrer"},x=(0,t.Uk)("factory_bot"),U=(0,t.Uk)(" is tightly coupled with Rails' ideas about persistence (even tho it tries to be ORM agnostic)."),T=(0,t.uE)('<p>The issue of metaprogramming is handled by a combination of approaches. The first is to pass in the fixture or evaluator wherever it&#39;s being used, instead of parsing implicit method calls. The second approach is to use <code>call</code> everywhere, making sure that the option of using full <code>function</code> statements instead of arrow functions keeps <code>this</code> correctly applied.</p><h2 id="async" tabindex="-1"><a class="header-anchor" href="#async" aria-hidden="true">#</a> Async</h2><p>The issue of async I handled by biting the bullet and just making all appropriate calls async. Sadly, this makes using an attribute within another attribute <em>very</em> verbose, which is unfortunate (as seen below), but none of the javascript ORMs are synchronous and it&#39;s not possible to avoid when a given attribute can reference an association. (I toyed with disallowing referencing associations, which would let all other attributes be synchronous, but that limits any complex async attributes from being defined.)</p><p>Example of referencing another attribute within an attribute in javascript:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// explicit</span>\nf<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> faker<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">firstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nf<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">await</span> e<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">@example.com</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// or implicit</span>\nf<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> faker<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">firstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nf<span class="token punctuation">.</span><span class="token function">email</span><span class="token punctuation">(</span><span class="token keyword">async</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">await</span> e<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">@example.com</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>versus in ruby:</p><div class="language-ruby ext-rb line-numbers-mode"><pre class="language-ruby"><code>name <span class="token punctuation">{</span> <span class="token constant">Faker</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Name</span><span class="token punctuation">.</span>first_name <span class="token punctuation">}</span>\nemail <span class="token punctuation">{</span> <span class="token string">&quot;<span class="token interpolation"><span class="token delimiter tag">#{</span>name<span class="token delimiter tag">}</span></span>@example.com&quot;</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>To keep evaluation simple, I deliberately kept all async calls synchronous otherwise, meaning that for a given async call, the library waits until it is finished, instead of deferring and then calling <code>Promise.all</code> or similar after the end. This also keeps the code the cleanest, making attribute assignment readable and consistent with synchronous calls.</p>',8),R=(0,t.Uk)("To tackle the issue of tight coupling, I took inspiration from the adapter system in simonexmachina's javascript library "),q={href:"https://github.com/simonexmachina/factory-girl",target:"_blank",rel:"noopener noreferrer"},I=(0,t.Uk)("factory-girl"),j=(0,t.Uk)(". Each ORM can define and handle the core calls differently, and each fixture can use whichever is most appropriate. This frees up the need to implement "),A={href:"https://github.com/thoughtbot/factory_bot/",target:"_blank",rel:"noopener noreferrer"},W=(0,t.Uk)("factory_bot"),D=(0,t.Uk)("'s "),E=(0,t._)("code",null,"to_create",-1),M=(0,t.Uk)(", "),O=(0,t._)("code",null,"skip_create",-1),S=(0,t.Uk)(", or "),N=(0,t._)("code",null,"initialize_with",-1),C=(0,t.Uk)(". Instead, the user can define a new adapter (extending an existing adapter if necessary) and override any of the functions. This allows for keeping one's custom construction and persistence functions DRY."),F={render:function(n,a){const s=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[e,(0,t._)("p",null,[o,(0,t._)("a",p,[i,(0,t.Wm)(s)]),c]),(0,t._)("p",null,[r,(0,t._)("a",l,[u,(0,t.Wm)(s)]),k,(0,t._)("a",h,[d,(0,t.Wm)(s)]),f,m,b,g,y,_,v,(0,t._)("a",w,[x,(0,t.Wm)(s)]),U]),T,(0,t._)("p",null,[R,(0,t._)("a",q,[I,(0,t.Wm)(s)]),j,(0,t._)("a",A,[W,(0,t.Wm)(s)]),D,E,M,O,S,N,C])],64)}}}}]);