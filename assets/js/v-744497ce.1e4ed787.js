"use strict";(self.webpackChunkfixture_riveter=self.webpackChunkfixture_riveter||[]).push([[671],{1911:(e,n,a)=>{a.r(n),a.d(n,{data:()=>s});const s={key:"v-744497ce",path:"/api/",title:"API",lang:"en-US",frontmatter:{sidebar:"auto",title:"API"},excerpt:"",headers:[{level:2,title:"fr and FixtureRiveter",slug:"fr-and-fixtureriveter",children:[]},{level:2,title:"Adapter",slug:"adapter",children:[]},{level:2,title:"Strategy",slug:"strategy",children:[]}],filePathRelative:"api/README.md"}},167:(e,n,a)=>{a.r(n),a.d(n,{default:()=>A});var s=a(6252);const t=(0,s.uE)('<h1 id="exports" tabindex="-1"><a class="header-anchor" href="#exports" aria-hidden="true">#</a> Exports</h1><p><code>fixture-riveter</code> exposes a number of classes and an instance of the primary class <code>FixtureRiveter</code> for easy consumption. Each of these exports is discussed below.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>\n    <span class="token comment">// primary export</span>\n    fr<span class="token punctuation">,</span>\n    FixtureRiveter<span class="token punctuation">,</span>\n\n    <span class="token comment">// ORM adapters</span>\n    Adapter<span class="token punctuation">,</span>\n    DefaultAdapter<span class="token punctuation">,</span>\n    ObjectionAdapter<span class="token punctuation">,</span>\n    SequelizeAdapter<span class="token punctuation">,</span>\n\n    <span class="token comment">// object creation strategies</span>\n    Strategy<span class="token punctuation">,</span>\n    AttributesForStrategy<span class="token punctuation">,</span>\n    BuildStrategy<span class="token punctuation">,</span>\n    CreateStrategy<span class="token punctuation">,</span>\n<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;fixture-riveter&quot;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="fr-and-fixtureriveter" tabindex="-1"><a class="header-anchor" href="#fr-and-fixtureriveter" aria-hidden="true">#</a> <code>fr</code> and <code>FixtureRiveter</code></h2>',4),r=(0,s.Uk)("The primary method for consuming the library. (The "),i=(0,s._)("code",null,"FixtureRiveter",-1),p=(0,s.Uk)(" constructor is exposed as well, in case you need to instantiate it yourself). A full description of the internals can be found in "),l=(0,s.Uk)("fixture-riveter"),o=(0,s.Uk)("."),c=(0,s._)("h2",{id:"adapter",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#adapter","aria-hidden":"true"},"#"),(0,s.Uk)(),(0,s._)("code",null,"Adapter")],-1),u=(0,s._)("code",null,"Adapter",-1),d=(0,s.Uk)(" is the interface that "),b=(0,s._)("code",null,"fixture-riveter",-1),h=(0,s.Uk)(" uses to interact with 1) a given fixture's class, and 2) the database (or ORM). It defines 5 methods that all subclasses must implement. A description of these methods, and instructions on writing your own, can be found in "),f=(0,s.Uk)("Adapter"),m=(0,s.Uk)("."),k=(0,s._)("h2",{id:"strategy",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#strategy","aria-hidden":"true"},"#"),(0,s.Uk)(),(0,s._)("code",null,"Strategy")],-1),x=(0,s._)("code",null,"Strategy",-1),g=(0,s.Uk)(" is the interface that "),v=(0,s._)("code",null,"fixture-riveter",-1),y=(0,s.Uk)(" uses to turn fixture definitions into objects, whether it be Plain Old Javascript Objects or instances of a given class. A description of its methods, and instructions on writing one's own, can be found in "),_=(0,s.Uk)("Strategy"),w=(0,s.Uk)("."),A={render:function(e,n){const a=(0,s.up)("RouterLink");return(0,s.wg)(),(0,s.iD)(s.HY,null,[t,(0,s._)("p",null,[r,i,p,(0,s.Wm)(a,{to:"/api/fr/"},{default:(0,s.w5)((()=>[l])),_:1}),o]),c,(0,s._)("p",null,[u,d,b,h,(0,s.Wm)(a,{to:"/api/adapter.html"},{default:(0,s.w5)((()=>[f])),_:1}),m]),k,(0,s._)("p",null,[x,g,v,y,(0,s.Wm)(a,{to:"/api/strategy.html"},{default:(0,s.w5)((()=>[_])),_:1}),w])],64)}}}}]);