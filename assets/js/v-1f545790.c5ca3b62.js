"use strict";(self.webpackChunkfixture_riveter=self.webpackChunkfixture_riveter||[]).push([[548],{8465:(e,a,t)=>{t.r(a),t.d(a,{data:()=>n});const n={key:"v-1f545790",path:"/api/strategy.html",title:"Strategy",lang:"en-US",frontmatter:{sidebar:"auto",title:"Strategy"},excerpt:"",headers:[{level:2,title:"Instance properties",slug:"instance-properties",children:[{level:3,title:"name",slug:"name",children:[]},{level:3,title:"adapter",slug:"adapter",children:[]},{level:3,title:"fixture-riveter",slug:"fixture-riveter",children:[]}]},{level:2,title:"Methods",slug:"methods",children:[{level:3,title:"result()",slug:"result",children:[]},{level:3,title:"relation()",slug:"relation",children:[]}]},{level:2,title:"Default Strategies",slug:"default-strategies",children:[{level:3,title:"build",slug:"build",children:[]},{level:3,title:"create",slug:"create",children:[]},{level:3,title:"attributesFor",slug:"attributesfor",children:[]}]}],filePathRelative:"api/strategy.md"}},7516:(e,a,t)=>{t.r(a),t.d(a,{default:()=>R});var n=t(6252);const s=(0,n.uE)('<h1 id="strategy" tabindex="-1"><a class="header-anchor" href="#strategy" aria-hidden="true">#</a> <code>Strategy</code></h1><p>Strategies are the way for <code>fixture-riveter</code> to modularize creation and relation in creating instances of fixture definitions. The interface is small, making subclassing easy.</p><h5 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h5><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>fr<span class="token punctuation">,</span> Strategy<span class="token punctuation">,</span> Assembler<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;fixture-riveter&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">JsonStrategy</span> <span class="token keyword">extends</span> <span class="token class-name">Strategy</span> <span class="token punctuation">{</span>\n    <span class="token comment">// This strategy takes the created instance and turns it into a json string</span>\n    <span class="token keyword">async</span> <span class="token generic-function"><span class="token function">result</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>assembler<span class="token operator">:</span> Assembler<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token keyword">await</span> assembler<span class="token punctuation">.</span><span class="token function">toInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nfr<span class="token punctuation">.</span><span class="token function">registerStrategy</span><span class="token punctuation">(</span><span class="token string">&quot;json&quot;</span><span class="token punctuation">,</span> JsonStrategy<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="instance-properties" tabindex="-1"><a class="header-anchor" href="#instance-properties" aria-hidden="true">#</a> Instance properties</h2><h3 id="name" tabindex="-1"><a class="header-anchor" href="#name" aria-hidden="true">#</a> name</h3><p>String name of this strategy. Used to find the strategy when calling <code>fr.run</code>.</p><h3 id="adapter" tabindex="-1"><a class="header-anchor" href="#adapter" aria-hidden="true">#</a> adapter</h3>',8),r=(0,n.Uk)("Instance of the specified "),l=(0,n.Uk)("Adapter"),i=(0,n.Uk)(" (per-fixture or global)."),o=(0,n.uE)('<h3 id="fixture-riveter" tabindex="-1"><a class="header-anchor" href="#fixture-riveter" aria-hidden="true">#</a> fixture-riveter</h3><p>The currently-running instance. Useful when using <code>relate</code> (see below).</p><h2 id="methods" tabindex="-1"><a class="header-anchor" href="#methods" aria-hidden="true">#</a> Methods</h2><p>None of the methods on a <code>Strategy</code> will be exposed to the uesr; they are called internally in the generation of a given fixture. Because each <code>Strategy</code> can perform wildly different operations, each method will be described at a high level. Then, the 3 provided <code>Strategies</code> will be detailed.</p><h3 id="result" tabindex="-1"><a class="header-anchor" href="#result" aria-hidden="true">#</a> result()</h3>',5),d=(0,n.Uk)('Handles calling the "object creation" methods given by the '),c=(0,n.Uk)("Assembler"),u=(0,n.Uk)(", awaiting callbacks as necessary. Accepts the Model class function as well, in case"),p=(0,n._)("h5",{id:"arguments",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#arguments","aria-hidden":"true"},"#"),(0,n.Uk)(" Arguments")],-1),h=(0,n._)("thead",null,[(0,n._)("tr",null,[(0,n._)("th",null,"Argument"),(0,n._)("th",null,"Type"),(0,n._)("th",null,"Description"),(0,n._)("th",null,"Optional?")])],-1),b=(0,n._)("td",null,"assembler",-1),f=(0,n.Uk)("Assembler"),g=(0,n._)("td",null,"Assembler instance",-1),k=(0,n._)("td",null,"Required",-1),m=(0,n._)("tr",null,[(0,n._)("td",null,"Model"),(0,n._)("td",null,"Class function"),(0,n._)("td",null,"The class function (constructor)"),(0,n._)("td",null,"Optional")],-1),y=(0,n.uE)('<h5 id="return-value" tabindex="-1"><a class="header-anchor" href="#return-value" aria-hidden="true">#</a> Return value</h5><table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>Promise&lt;any&gt;</td><td>Object to be returned directly to the caller.</td></tr></tbody></table><h3 id="relation" tabindex="-1"><a class="header-anchor" href="#relation" aria-hidden="true">#</a> relation()</h3><p>When a fixture defines a relationship to another fixture, this method is called to perform the creation of the related object.</p><h5 id="arguments-1" tabindex="-1"><a class="header-anchor" href="#arguments-1" aria-hidden="true">#</a> Arguments</h5><table><thead><tr><th>Argument</th><th>Type</th><th>Description</th><th>Optional?</th></tr></thead><tbody><tr><td>fixtureName</td><td>string</td><td>Fixture name of relation</td><td>Required</td></tr><tr><td>traitsAndOverrides</td><td>[string[]] <br> [Record&lt;string, any&gt;] <br> [string[], Record&lt;string, any&gt;]</td><td>A list of a list of traits and/or overrides for the relation</td><td>Optional</td></tr></tbody></table><h5 id="return-value-1" tabindex="-1"><a class="header-anchor" href="#return-value-1" aria-hidden="true">#</a> Return value</h5><table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>Promise&lt;any&gt;</td><td>Object to be set on the current fixture instance.</td></tr></tbody></table><h2 id="default-strategies" tabindex="-1"><a class="header-anchor" href="#default-strategies" aria-hidden="true">#</a> Default <code>Strategies</code></h2><h3 id="build" tabindex="-1"><a class="header-anchor" href="#build" aria-hidden="true">#</a> <code>build</code></h3><h4 id="result-1" tabindex="-1"><a class="header-anchor" href="#result-1" aria-hidden="true">#</a> result()</h4><p>Creates an instance of the fixture&#39;s model, assigns attributes, and then performs the <code>after(&quot;build&quot;)</code> callback.</p><h4 id="relation-1" tabindex="-1"><a class="header-anchor" href="#relation-1" aria-hidden="true">#</a> relation()</h4><p>Calls <code>fr.run</code> with the &quot;build&quot; strategy, returning just the instance of the related fixture.</p><h3 id="create" tabindex="-1"><a class="header-anchor" href="#create" aria-hidden="true">#</a> <code>create</code></h3><h4 id="result-2" tabindex="-1"><a class="header-anchor" href="#result-2" aria-hidden="true">#</a> result()</h4>',16),x=(0,n.Uk)("Creates an instance of the fixture's model and assigns attributes. Performs the "),v=(0,n._)("code",null,'after("build")',-1),_=(0,n.Uk)(" and "),w=(0,n._)("code",null,'before("create")',-1),U=(0,n.Uk)(" callbacks. Calls the adapter's "),S=(0,n._)("code",null,"save",-1),q=(0,n.Uk)(" method (detailed "),A=(0,n.Uk)("here"),T=(0,n.Uk)("), and then performs the "),j=(0,n._)("code",null,'after("create")',-1),C=(0,n.Uk)(" callbacks."),O=(0,n.uE)('<h4 id="relation-2" tabindex="-1"><a class="header-anchor" href="#relation-2" aria-hidden="true">#</a> relation()</h4><p>Calls <code>fr.run</code> with the &quot;create&quot; strategy, returning the saved instance of the related fixture.</p><h3 id="attributesfor" tabindex="-1"><a class="header-anchor" href="#attributesfor" aria-hidden="true">#</a> <code>attributesFor</code></h3><h4 id="result-3" tabindex="-1"><a class="header-anchor" href="#result-3" aria-hidden="true">#</a> result()</h4><p>Assigns the fixture&#39;s attributes to a plain javacsript object.</p><h4 id="relation-3" tabindex="-1"><a class="header-anchor" href="#relation-3" aria-hidden="true">#</a> relation()</h4><p>Calls <code>fr.run</code> with the &quot;null&quot; strategy, returning <code>undefined</code>.</p>',7),R={render:function(e,a){const t=(0,n.up)("RouterLink");return(0,n.wg)(),(0,n.iD)(n.HY,null,[s,(0,n._)("p",null,[r,(0,n.Wm)(t,{to:"/api/adapter.html"},{default:(0,n.w5)((()=>[l])),_:1}),i]),o,(0,n._)("p",null,[d,(0,n.Wm)(t,{to:"/api/assembler.html"},{default:(0,n.w5)((()=>[c])),_:1}),u]),p,(0,n._)("table",null,[h,(0,n._)("tbody",null,[(0,n._)("tr",null,[b,(0,n._)("td",null,[(0,n.Wm)(t,{to:"/api/assembler.html"},{default:(0,n.w5)((()=>[f])),_:1})]),g,k]),m])]),y,(0,n._)("p",null,[x,v,_,w,U,S,q,(0,n.Wm)(t,{to:"/api/adapter.html#save"},{default:(0,n.w5)((()=>[A])),_:1}),T,j,C]),O],64)}}}}]);