"use strict";(self.webpackChunkfixture_riveter=self.webpackChunkfixture_riveter||[]).push([[807],{9570:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-fffb8e28",path:"/guide/",title:"Intro",lang:"en-US",frontmatter:{},excerpt:"",headers:[],filePathRelative:"guide/README.md"}},9829:(n,s,a)=>{a.r(s),a.d(s,{default:()=>g});var t=a(6252);const e=(0,t._)("h1",{id:"intro",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#intro","aria-hidden":"true"},"#"),(0,t.Uk)(" Intro")],-1),p=(0,t.Uk)("The guides listed in the sidebar are high-level overviews of the various use-cases and features of "),o=(0,t._)("code",null,"fixture-riveter",-1),c=(0,t.Uk)(", linking to the "),u={href:"/api/",target:"_blank",rel:"noopener noreferrer"},l=(0,t.Uk)("API"),i=(0,t.Uk)(" docs where necessary to provide a full understanding."),r=(0,t._)("div",{class:"custom-container tip"},[(0,t._)("p",{class:"custom-container-title"},"NOTE"),(0,t._)("p",null,"Because this library is written in Typescript and designed to be used in a Typescript codebase, all code in the guides will be in Typescript.")],-1),k=(0,t.Uk)("As a brief overview, here is the example from the "),m={href:"/tutorial/",target:"_blank",rel:"noopener noreferrer"},b=(0,t.Uk)("tutorial"),d=(0,t.Uk)(" with explanatory comments."),f=(0,t.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>fr<span class="token punctuation">,</span> ObjectionAdapter<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;fixture-riveter&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>User<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./models/user&quot;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Each adapter can specify ORM-specific build, save, relate, and set functions.</span>\n<span class="token comment">// A given adapter can be set on a specific fixture as well, allowing for</span>\n<span class="token comment">// fixture-specific build and save functionality.</span>\nfr<span class="token punctuation">.</span><span class="token function">setAdapter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObjectionAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// `fixture` defines a new fixture, and requires a name, the model class to build, and</span>\n<span class="token comment">// a function that takes a single argument (the fixture).</span>\nfr<span class="token punctuation">.</span><span class="token function">fixture</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> User<span class="token punctuation">,</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Attributes can be defined explicitly with `attr`</span>\n    f<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;Noah&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// or implicitly by calling the attribute name directly on the fixture</span>\n    f<span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// There is support for sequences, which are integers by default and increment on</span>\n    <span class="token comment">// each usage</span>\n    f<span class="token punctuation">.</span><span class="token function">sequence</span><span class="token punctuation">(</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">test</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>n<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">@example.com</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// `create` inserts the built fixture into the database (calling the `save` function in</span>\n<span class="token comment">// the adapater), but you can use `build` to just return the build an instance of the</span>\n<span class="token comment">// model, or `attributesFor` to create a plain object.</span>\n<span class="token comment">// Any attribute can be overridden by passing in an object of the desired changes. These</span>\n<span class="token comment">// always take precedence over the attributes in the fixture definition.</span>\n<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> fr<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&quot;Bogart&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nuser <span class="token keyword">instanceof</span> <span class="token class-name">User</span><span class="token punctuation">;</span>\n<span class="token comment">// true</span>\nNumber<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// true</span>\nuser<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&quot;Bogart&quot;</span><span class="token punctuation">;</span>\n<span class="token comment">// true</span>\nuser<span class="token punctuation">.</span>age <span class="token operator">===</span> <span class="token number">32</span><span class="token punctuation">;</span>\n<span class="token comment">// true</span>\nusser<span class="token punctuation">.</span>email <span class="token operator">===</span> <span class="token string">&quot;test1@example.com&quot;</span><span class="token punctuation">;</span>\n<span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div>',1),g={render:function(n,s){const a=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[e,(0,t._)("p",null,[p,o,c,(0,t._)("a",u,[l,(0,t.Wm)(a)]),i]),r,(0,t._)("p",null,[k,(0,t._)("a",m,[b,(0,t.Wm)(a)]),d]),f],64)}}}}]);