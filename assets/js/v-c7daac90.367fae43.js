"use strict";(self.webpackChunkfixture_riveter=self.webpackChunkfixture_riveter||[]).push([[115],{8954:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-c7daac90",path:"/api/adapter.html",title:"Adapter",lang:"en-US",frontmatter:{sidebar:"auto",title:"Adapter"},excerpt:"",headers:[{level:2,title:"Adapter methods",slug:"adapter-methods",children:[{level:3,title:"build()",slug:"build",children:[]},{level:3,title:"save()",slug:"save",children:[]},{level:3,title:"destroy()",slug:"destroy",children:[]},{level:3,title:"relate()",slug:"relate",children:[]},{level:3,title:"set()",slug:"set",children:[]}]}],filePathRelative:"api/adapter.md"}},6466:(n,s,a)=>{a.r(s),a.d(s,{default:()=>i});var e=a(6252);const t=(0,e._)("h1",{id:"adapter",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#adapter","aria-hidden":"true"},"#"),(0,e.Uk)(),(0,e._)("code",null,"Adapter")],-1),p=(0,e.Uk)("Instead of writing ORM-specific code for instancing and persisting created objects, we rely on this interface (and the following default implementation of it). This handles two aspects of "),o={href:"https://github.com/thoughtbot/factory_bot/",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Uk)("factory_bot"),l=(0,e.Uk)(": creating an instance of a given model, and then persisting it to the database. (There are other reasons to use it, but that's less important.)"),r=(0,e.uE)('<p>The <code>DefaultAdapter</code> has barebones implementations of each of the interface&#39;s functions to keep code DRY and focused only on the methods that matter. The expectation is that any implementations of <code>Adapter</code> will be based on <code>DefaultAdapter</code>.</p><h5 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h5><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>fr<span class="token punctuation">,</span> DefaultAdapter<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;fixture-riveter&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UserAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultAdapter</span> <span class="token punctuation">{</span>\n    <span class="token comment">// This model needs `isNew` set before any fields are set.</span>\n    <span class="token generic-function"><span class="token function">build</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>Model<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Model</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        instance<span class="token punctuation">.</span>isNew <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nfr<span class="token punctuation">.</span><span class="token function">setAdapter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="adapter-methods" tabindex="-1"><a class="header-anchor" href="#adapter-methods" aria-hidden="true">#</a> <code>Adapter</code> methods</h2><p>None of the methods on an <code>Adapter</code> will be exposed to the user; they are called internally at various points in the generation of a given fixture. Therefore, the examples below will use the <code>DefaultAdapter</code> to demonstrate how the methods work.</p><h3 id="build" tabindex="-1"><a class="header-anchor" href="#build" aria-hidden="true">#</a> build()</h3><p>Called to create an instance of the fixture&#39;s Model class. Unless specific arguments are required, <code>DefaultAdapter</code>&#39;s implementation is generally good enough.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">DefaultAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">Adapter</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    <span class="token generic-function"><span class="token function">build</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>Model<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Model</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// ...</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h5 id="arguments" tabindex="-1"><a class="header-anchor" href="#arguments" aria-hidden="true">#</a> Arguments</h5><table><thead><tr><th>Argument</th><th>Type</th><th>Description</th><th>Optional?</th></tr></thead><tbody><tr><td>Model</td><td>Class function</td><td>The class function (constructor)</td><td>Required</td></tr></tbody></table><h5 id="return-value" tabindex="-1"><a class="header-anchor" href="#return-value" aria-hidden="true">#</a> Return value</h5><table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>Class instance</td><td>Instance of Model</td></tr></tbody></table><h5 id="example-1" tabindex="-1"><a class="header-anchor" href="#example-1" aria-hidden="true">#</a> Example</h5><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> user <span class="token operator">=</span> adapter<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">;</span>\nuser <span class="token keyword">instanceof</span> <span class="token class-name">User</span>\n<span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="save" tabindex="-1"><a class="header-anchor" href="#save" aria-hidden="true">#</a> save()</h3><p>Called to persist the instance to the database. Must return the persisted instance, not the parameter instance (if there is a difference). Accepts the class function to allow for static methods on the class to handle persistence (for example, Objection.js).</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">DefaultAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">Adapter</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    <span class="token keyword">async</span> <span class="token generic-function"><span class="token function">save</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>instance<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> instance<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// ...</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h5 id="arguments-1" tabindex="-1"><a class="header-anchor" href="#arguments-1" aria-hidden="true">#</a> Arguments</h5><table><thead><tr><th>Argument</th><th>Type</th><th>Description</th><th>Optional?</th></tr></thead><tbody><tr><td>instance</td><td>Class instance</td><td>Instance of Model</td><td>Required</td></tr><tr><td>Model</td><td>Class function</td><td>The class function (constructor)</td><td>Optional</td></tr></tbody></table><h5 id="return-value-1" tabindex="-1"><a class="header-anchor" href="#return-value-1" aria-hidden="true">#</a> Return value</h5><table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>Class instance</td><td>The instance</td></tr></tbody></table><h5 id="example-2" tabindex="-1"><a class="header-anchor" href="#example-2" aria-hidden="true">#</a> Example</h5><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nuser<span class="token punctuation">.</span>id\n<span class="token comment">// undefined</span>\nuser <span class="token operator">=</span> <span class="token keyword">await</span> adapter<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> User<span class="token punctuation">)</span><span class="token punctuation">;</span>\nuser<span class="token punctuation">.</span>id\n<span class="token comment">// 1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="destroy" tabindex="-1"><a class="header-anchor" href="#destroy" aria-hidden="true">#</a> destroy()</h3><p>Called to delete or remove the instance from the database. Must gracefully handle if the instance has not been persisted to the database (for instance, the instance was constructed with <code>fr.build</code>, not <code>fr.create</code>). Accepts the class function to allow for static methods on the class to handle deletion (for example, Objection.js).</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">DefaultAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">Adapter</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    <span class="token keyword">async</span> <span class="token function">destroy</span><span class="token punctuation">(</span>instance<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">await</span> instance<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// ...</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h5 id="arguments-2" tabindex="-1"><a class="header-anchor" href="#arguments-2" aria-hidden="true">#</a> Arguments</h5><table><thead><tr><th>Argument</th><th>Type</th><th>Description</th><th>Optional?</th></tr></thead><tbody><tr><td>instance</td><td>Class instance</td><td>Instance of Model</td><td>Required</td></tr><tr><td>Model</td><td>Class function</td><td>The class function (constructor)</td><td>Optional</td></tr></tbody></table><h5 id="return-value-2" tabindex="-1"><a class="header-anchor" href="#return-value-2" aria-hidden="true">#</a> Return value</h5><table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>Promise</td><td>A promise</td></tr></tbody></table><h5 id="example-3" tabindex="-1"><a class="header-anchor" href="#example-3" aria-hidden="true">#</a> Example</h5><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">await</span> user<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">await</span> adapter<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> User<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// []</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="relate" tabindex="-1"><a class="header-anchor" href="#relate" aria-hidden="true">#</a> relate()</h3><p>Called to &quot;join&quot; two fixture instances together.</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>TODO: clean me up</p></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">DefaultAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">Adapter</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    <span class="token keyword">async</span> <span class="token function">relate</span><span class="token punctuation">(</span>instance<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> other<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// ...</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h5 id="arguments-3" tabindex="-1"><a class="header-anchor" href="#arguments-3" aria-hidden="true">#</a> Arguments</h5><table><thead><tr><th>Argument</th><th>Type</th><th>Description</th><th>Optional?</th></tr></thead><tbody><tr><td>instance</td><td>Class instance</td><td>Instance of a fixture</td><td>Required</td></tr><tr><td>name</td><td>string</td><td>Property on <code>instance</code> to set <code>other</code> to</td><td>Required</td></tr><tr><td>other</td><td>Class instance</td><td>Instance of a fixture</td><td>Required</td></tr><tr><td>Model</td><td>Class function</td><td>The class function (constructor)</td><td>Optional</td></tr></tbody></table><h5 id="return-value-3" tabindex="-1"><a class="header-anchor" href="#return-value-3" aria-hidden="true">#</a> Return value</h5><table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>Class instance</td><td>The instance</td></tr></tbody></table><h5 id="example-4" tabindex="-1"><a class="header-anchor" href="#example-4" aria-hidden="true">#</a> Example</h5><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">Post</span> <span class="token punctuation">{</span>\n    user<span class="token operator">:</span> User<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> post <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\npost<span class="token punctuation">.</span>user\n<span class="token comment">// undefined</span>\npost <span class="token operator">=</span> adapter<span class="token punctuation">.</span><span class="token function">relate</span><span class="token punctuation">(</span>post<span class="token punctuation">,</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>\npost<span class="token punctuation">.</span>user <span class="token operator">===</span> user<span class="token punctuation">;</span>\n<span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> set()</h3><p>Called to set a property on a fixture instance. Returns the whole instance just in case???</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>TODO: clean me up</p></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">DefaultAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">Adapter</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    <span class="token function">set</span><span class="token punctuation">(</span>instance<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span>\n        instance<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>\n        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// ...</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h5 id="arguments-4" tabindex="-1"><a class="header-anchor" href="#arguments-4" aria-hidden="true">#</a> Arguments</h5><p>(instance: any, key: string, value: any)</p><table><thead><tr><th>Argument</th><th>Type</th><th>Description</th><th>Optional?</th></tr></thead><tbody><tr><td>instance</td><td>Class instance</td><td>Instance of a fixture</td><td>Required</td></tr><tr><td>key</td><td>string</td><td>Property on <code>instance</code></td><td>Required</td></tr><tr><td>value</td><td>any</td><td>A value from an attribute function</td><td>Required</td></tr></tbody></table><h5 id="return-value-4" tabindex="-1"><a class="header-anchor" href="#return-value-4" aria-hidden="true">#</a> Return value</h5><table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>Class instance</td><td>The instance</td></tr></tbody></table><h5 id="example-5" tabindex="-1"><a class="header-anchor" href="#example-5" aria-hidden="true">#</a> Example</h5><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nuser <span class="token operator">=</span> adapter<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">&quot;firstName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Noah&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nuser<span class="token punctuation">.</span>firstName\n<span class="token comment">// &quot;Noah&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',53),i={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,(0,e._)("p",null,[p,(0,e._)("a",o,[c,(0,e.Wm)(a)]),l]),r],64)}}}}]);