"use strict";(self.webpackChunkfixture_riveter=self.webpackChunkfixture_riveter||[]).push([[660],{3921:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-7032bbb4",path:"/guide/defining-fixtures.html",title:"Defining fixtures",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Naming",slug:"naming",children:[]},{level:2,title:"Attributes",slug:"attributes",children:[]},{level:2,title:"Dependent attributes",slug:"dependent-attributes",children:[]},{level:2,title:"Argument passing vs Context",slug:"argument-passing-vs-context",children:[]},{level:2,title:"Aliases",slug:"aliases",children:[]},{level:2,title:"Transient attributes",slug:"transient-attributes",children:[]},{level:2,title:"Nested fixtures",slug:"nested-fixtures",children:[]}],filePathRelative:"guide/defining-fixtures.md"}},8898:(n,s,a)=>{a.r(s),a.d(s,{default:()=>y});var t=a(6252);const p=(0,t.uE)('<h1 id="defining-fixtures" tabindex="-1"><a class="header-anchor" href="#defining-fixtures" aria-hidden="true">#</a> Defining fixtures</h1><p>As seen above, each fixture has a name, a model class, and a function for defining the attributes.</p><h2 id="naming" tabindex="-1"><a class="header-anchor" href="#naming" aria-hidden="true">#</a> Naming</h2><p>When defining fixtures, you can explicitly pass in the fixture&#39;s name as a string:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\nfr<span class="token punctuation">.</span><span class="token function">fixture</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> User<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> fr<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',5),e=(0,t.Uk)("If your model class defines a static "),o=(0,t._)("code",null,"tableName",-1),c=(0,t.Uk)(" property (because you're extending "),u={href:"https://vincit.github.io/objection.js/",target:"_blank",rel:"noopener noreferrer"},l=(0,t.Uk)("Objection.js"),i=(0,t.Uk)("'s Model, for example), you can pass in the model directly and the model's static "),r=(0,t._)("code",null,"tableName",-1),k=(0,t.Uk)(" property will be used:"),b=(0,t.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n    <span class="token keyword">static</span> tableName <span class="token operator">=</span> <span class="token string">&quot;users&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nfr<span class="token punctuation">.</span><span class="token function">fixture</span><span class="token punctuation">(</span>User<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> fr<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>If you don&#39;t define the static <code>tableName</code> property, you can still use the class directly; the class&#39;s <code>name</code> property will be used.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\nfr<span class="token punctuation">.</span><span class="token function">fixture</span><span class="token punctuation">(</span>User<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> fr<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token string">&quot;User&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>As seen, no modifications are performed on the derived class name, so the string must be matched. Take care, as minifiers and transpilers can munge class names.</p></div><h2 id="attributes" tabindex="-1"><a class="header-anchor" href="#attributes" aria-hidden="true">#</a> Attributes</h2><p>When defining attributes, you can use the explicit function <code>attr</code>, which takes the attribute name as the first argument:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>f<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;First post!&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>You can also call your attribute as a method on the fixture, which will pass the method name as the attribute to <code>attr</code>:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>f<span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;First post!&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Implicit calling is the same as explicit calling in all ways except for when an attribute shares a name with one of the properties on the <code>DefinitionProxy</code> class. In those cases, an explicit call to <code>attr</code> will work as hoped:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>f<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;sequence&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;12345&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>The library was initially written to only support explicit definitions, but has since gained implicit definition functionality. The rest of the guide will use a mix of both throughout; neither is preferred, both are acceptable.</p><h2 id="dependent-attributes" tabindex="-1"><a class="header-anchor" href="#dependent-attributes" aria-hidden="true">#</a> Dependent attributes</h2><p>Attributes can be defined with references to other attributes, even when they are defined out of order:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>fr<span class="token punctuation">.</span><span class="token function">fixture</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> User<span class="token punctuation">,</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    f<span class="token punctuation">.</span><span class="token function">email</span><span class="token punctuation">(</span><span class="token keyword">async</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">// Attributes can be referenced explicitly</span>\n        <span class="token keyword">const</span> firstName <span class="token operator">=</span> <span class="token keyword">await</span> e<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;firstName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// or implicitly, just like in a definition</span>\n        <span class="token keyword">const</span> lastName <span class="token operator">=</span> <span class="token keyword">await</span> e<span class="token punctuation">.</span><span class="token function">lastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">@example.com</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    f<span class="token punctuation">.</span><span class="token function">firstName</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;Noah&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    f<span class="token punctuation">.</span><span class="token function">lastName</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;Bogart&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> fr<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nuser<span class="token punctuation">.</span>email <span class="token operator">===</span> <span class="token string">&quot;noah-bogart@example.com&quot;</span><span class="token punctuation">;</span>\n<span class="token comment">// &gt; true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>',15),d={class:"custom-container tip"},m=(0,t._)("p",{class:"custom-container-title"},"TIP",-1),f=(0,t.Uk)("Note: referencing other attributes must be async. Reasoning for this is discussed in "),g=(0,t.Uk)("the notes"),h=(0,t.Uk)("."),q=(0,t.uE)('<h2 id="argument-passing-vs-context" tabindex="-1"><a class="header-anchor" href="#argument-passing-vs-context" aria-hidden="true">#</a> Argument passing vs Context</h2><p>Each definition function is called with the correct context, allowing for <code>this</code>-based definitions. It is more verbose than single-character arguments (and eslint will complain about an invalid use of <code>this</code>), but it simplifies having to track which &quot;level&quot; of definition a given attribute is being defined within.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>fr<span class="token punctuation">.</span><span class="token function">fixture</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> User<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">firstName</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;Noah&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">lastName</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;Bogart&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">email</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> firstName <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">firstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> lastName <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">lastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">@example.com</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>This only works with &quot;normal&quot; function expressions, not arrow functions.</p></div><h2 id="aliases" tabindex="-1"><a class="header-anchor" href="#aliases" aria-hidden="true">#</a> Aliases</h2><p>To make fixture reuse and specificity easier, fixtures can be defined with aliases:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>fr<span class="token punctuation">.</span><span class="token function">fixture</span><span class="token punctuation">(</span><span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span> Post<span class="token punctuation">,</span> <span class="token punctuation">{</span>aliases<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;twit&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;comment&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    f<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;First post!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    f<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;body&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;Thank you for reading.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> comment <span class="token operator">=</span> <span class="token keyword">await</span> fr<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token string">&quot;comment&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ncomment<span class="token punctuation">.</span>title <span class="token operator">===</span> <span class="token string">&quot;First post!&quot;</span><span class="token punctuation">;</span>\n<span class="token comment">// &gt; true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>This is different than aliases in attribute and trait definitions, as fixtures can also accept other options (<code>parent</code> and <code>traits</code>).</p><h2 id="transient-attributes" tabindex="-1"><a class="header-anchor" href="#transient-attributes" aria-hidden="true">#</a> Transient attributes</h2><p>Transient attributes are properties that exist on the model but are not persisted in the database. They are quite helpful in defining a &quot;variable&quot; that is only used within a fixture definition:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>fr<span class="token punctuation">.</span><span class="token function">fixture</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> User<span class="token punctuation">,</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    f<span class="token punctuation">.</span><span class="token function">transient</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        t<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;cool&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    f<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> cool <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">await</span> user<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;cool&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cool <span class="token operator">=</span> <span class="token string">&#39;&quot;The Coolest Dude&quot;&#39;</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Noah </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cool<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> Bogart</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> fr<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>cool<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nuser<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;Noah &quot;The Coolest Dude&quot; Bogart&#39;</span><span class="token punctuation">;</span>\n<span class="token comment">// &gt; true</span>\nReflect<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">&quot;cool&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// &gt; false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>Transient attributes are available in callbacks as well (which will be discussed at length later on). During a callback, the transient attribute is available on the second argument, the evaluator:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>fr<span class="token punctuation">.</span><span class="token function">fixture</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> User<span class="token punctuation">,</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    f<span class="token punctuation">.</span><span class="token function">transient</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        t<span class="token punctuation">.</span><span class="token function">cool</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    f<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;Noah Bogart&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    f<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token string">&quot;build&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> evaluator<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> cool <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">await</span> evaluator<span class="token punctuation">.</span><span class="token function">cool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cool <span class="token operator">=</span> <span class="token string">&#39;&quot;The Coolest Dude&quot;&#39;</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span> last<span class="token punctuation">]</span> <span class="token operator">=</span> user<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        user<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span> cool<span class="token punctuation">,</span> last<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> fr<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>cool<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nuser<span class="token punctuation">.</span>name\n<span class="token comment">// =&gt; &#39;Noah &quot;The Coolest Dude&quot; Bogart&#39;</span>\nReflect<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">&quot;cool&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="nested-fixtures" tabindex="-1"><a class="header-anchor" href="#nested-fixtures" aria-hidden="true">#</a> Nested fixtures</h2><p>By defining a fixture within a fixture, the child fixture will inherit and override any declared attributes on the parent, all the way up the inheritance chain.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>fr<span class="token punctuation">.</span><span class="token function">fixture</span><span class="token punctuation">(</span><span class="token string">&quot;grandparentList&quot;</span><span class="token punctuation">,</span> List<span class="token punctuation">,</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    f<span class="token punctuation">.</span><span class="token function">entry1</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;100&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    f<span class="token punctuation">.</span><span class="token function">entry2</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;200&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    f<span class="token punctuation">.</span><span class="token function">fixture</span><span class="token punctuation">(</span><span class="token string">&quot;parentList&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ff<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        ff<span class="token punctuation">.</span><span class="token function">entry2</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;20&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        ff<span class="token punctuation">.</span><span class="token function">entry3</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;30&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        ff<span class="token punctuation">.</span><span class="token function">fixture</span><span class="token punctuation">(</span><span class="token string">&quot;childList&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>fff<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            fff<span class="token punctuation">.</span><span class="token function">entry3</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token keyword">await</span> fr<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token string">&quot;childList&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlist<span class="token punctuation">.</span>entry1\n<span class="token comment">// =&gt; 100</span>\nlist<span class="token punctuation">.</span>entry2\n<span class="token comment">// =&gt; 20</span>\nlist<span class="token punctuation">.</span>entry3\n<span class="token comment">// =&gt; 3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>The child fixture&#39;s class can be specified as well, by passing in a different <code>model</code> in the options map.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>fr<span class="token punctuation">.</span><span class="token function">fixture</span><span class="token punctuation">(</span><span class="token string">&quot;parentList&quot;</span><span class="token punctuation">,</span> List<span class="token punctuation">,</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    f<span class="token punctuation">.</span><span class="token function">entry1</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;10&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    f<span class="token punctuation">.</span><span class="token function">fixture</span><span class="token punctuation">(</span><span class="token string">&quot;childList&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>model<span class="token operator">:</span> List2<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ff<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        ff<span class="token punctuation">.</span><span class="token function">entry2</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token keyword">await</span> fr<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token string">&quot;childList&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlist<span class="token punctuation">.</span>entry1\n<span class="token comment">// =&gt; 10</span>\nlist<span class="token punctuation">.</span>entry2\n<span class="token comment">// =&gt; 2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>The parent fixture can be specified instead of nesting:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>fr<span class="token punctuation">.</span><span class="token function">fixture</span><span class="token punctuation">(</span><span class="token string">&quot;parentList&quot;</span><span class="token punctuation">,</span> List<span class="token punctuation">,</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    f<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;entry1&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;10&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    f<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;entry2&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;20&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nfr<span class="token punctuation">.</span><span class="token function">fixture</span><span class="token punctuation">(</span><span class="token string">&quot;childList&quot;</span><span class="token punctuation">,</span> List<span class="token punctuation">,</span> <span class="token punctuation">{</span>parent<span class="token operator">:</span> <span class="token string">&quot;parentList&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    f<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;entry2&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    f<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;entry3&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token keyword">await</span> fr<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token string">&quot;childList&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlist<span class="token punctuation">.</span>entry1\n<span class="token comment">// =&gt; 10</span>\nlist<span class="token punctuation">.</span>entry2\n<span class="token comment">// =&gt; 2</span>\nlist<span class="token punctuation">.</span>entry3\n<span class="token comment">// =&gt; 3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>',20),y={render:function(n,s){const a=(0,t.up)("OutboundLink"),y=(0,t.up)("RouterLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[p,(0,t._)("p",null,[e,o,c,(0,t._)("a",u,[l,(0,t.Wm)(a)]),i,r,k]),b,(0,t._)("div",d,[m,(0,t._)("p",null,[f,(0,t.Wm)(y,{to:"/notes/differences-from-factory-bot.html#async"},{default:(0,t.w5)((()=>[g])),_:1}),h])]),q],64)}}}}]);