"use strict";(self.webpackChunkfixture_riveter=self.webpackChunkfixture_riveter||[]).push([[734],{8032:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-148a9f33",path:"/guide/sequences.html",title:"Sequences",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Defining sequences",slug:"defining-sequences",children:[]},{level:2,title:"Resetting sequences",slug:"resetting-sequences",children:[]},{level:2,title:"Sequence options",slug:"sequence-options",children:[{level:3,title:"Initial value",slug:"initial-value",children:[]},{level:3,title:"Generator function",slug:"generator-function",children:[]},{level:3,title:"Aliases",slug:"aliases",children:[]},{level:3,title:"Callbacks",slug:"callbacks",children:[]},{level:3,title:"Combining options",slug:"combining-options",children:[]}]}],filePathRelative:"guide/sequences.md"}},5597:(n,s,a)=>{a.r(s),a.d(s,{default:()=>k});var t=a(6252);const p=(0,t._)("h1",{id:"sequences",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#sequences","aria-hidden":"true"},"#"),(0,t.Uk)(" Sequences")],-1),e=(0,t.Uk)("Sequences are wrappers around "),o={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",target:"_blank",rel:"noopener noreferrer"},c=(0,t.Uk)("Generators"),u=(0,t.Uk)(", useful in providing unique values for attributes (such as email addresses). They can be defined directly as attributes in fixtures or globally on the "),l=(0,t._)("code",null,"fr",-1),i=(0,t.Uk)(" object itself. By default, they generate numbers and start at 1."),r=(0,t.uE)('<h2 id="defining-sequences" tabindex="-1"><a class="header-anchor" href="#defining-sequences" aria-hidden="true">#</a> Defining sequences</h2><p>Global sequences are defined on the <code>fr</code> object, just like fixtures and traits.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>fr<span class="token punctuation">.</span><span class="token function">sequence</span><span class="token punctuation">(</span><span class="token string">&quot;dayNumber&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nfr<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token string">&quot;dayNumber&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 1</span>\nfr<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token string">&quot;dayNumber&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Attribute sequences are defined on fixtures, like other attributes.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>fr<span class="token punctuation">.</span><span class="token function">fixture</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> User<span class="token punctuation">,</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Creates a new sequence on &quot;user&quot; on a new attribute &quot;age&quot;</span>\n    f<span class="token punctuation">.</span><span class="token function">sequence</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// Creates a new attribute &quot;day&quot;, explicitly using the global sequence &quot;dayNumber&quot;</span>\n    f<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;day&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> fr<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token string">&quot;dayNumber&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// Creates a new attribute &quot;dayNumber&quot;, implicitly using the global</span>\n    <span class="token comment">//sequence &quot;dayNumber&quot;. Doesn&#39;t work if there is a fixture with the same name</span>\n    f<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;dayNumber&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> fr<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nuser<span class="token punctuation">.</span>age<span class="token punctuation">;</span>\n<span class="token comment">// 1</span>\nuser<span class="token punctuation">.</span>day<span class="token punctuation">;</span>\n<span class="token comment">// 1</span>\nuser<span class="token punctuation">.</span>dayNumber<span class="token punctuation">;</span>\n<span class="token comment">// 2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><code>fr.generate</code> only works on global sequences. Global sequences must have unique names.</p><h2 id="resetting-sequences" tabindex="-1"><a class="header-anchor" href="#resetting-sequences" aria-hidden="true">#</a> Resetting sequences</h2><p>All sequences can be reset to their initial value, using the global <code>fr.resetSequences</code>:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>fr<span class="token punctuation">.</span><span class="token function">sequence</span><span class="token punctuation">(</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">test</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">@domain.com</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfr<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// test1@domain.com</span>\nfr<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// test2@domain.com</span>\nfr<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// test3@domain.com</span>\n\nfr<span class="token punctuation">.</span><span class="token function">resetSequences</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nfr<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// test1@domain.com</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="sequence-options" tabindex="-1"><a class="header-anchor" href="#sequence-options" aria-hidden="true">#</a> Sequence options</h2><h3 id="initial-value" tabindex="-1"><a class="header-anchor" href="#initial-value" aria-hidden="true">#</a> Initial value</h3><p>Sequences can be given initial values, either a number or a string or an object with key <code>initial</code> that contains a number or a string:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>fr<span class="token punctuation">.</span><span class="token function">sequence</span><span class="token punctuation">(</span><span class="token string">&quot;counter&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfr<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token string">&quot;counter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 3</span>\nfr<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token string">&quot;counter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 4</span>\n\nfr<span class="token punctuation">.</span><span class="token function">sequence</span><span class="token punctuation">(</span><span class="token string">&quot;greeting&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfr<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token string">&quot;greeting&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Hello</span>\nfr<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token string">&quot;greeting&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Hellp</span>\n\nfr<span class="token punctuation">.</span><span class="token function">sequence</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>initial<span class="token operator">:</span> <span class="token number">34</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfr<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 34</span>\nfr<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 35</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><strong>NOTE</strong>: Behind the scenes, the initial value is used to select the appropriate pre-built generator. <code>{initial: &quot;hello&quot;}</code> is the same as <code>{gen: () =&gt; stringGen(&quot;hello&quot;)}</code>, and <code>{initial: 34}</code> is the same as <code>{gen: () =&gt; numberGen(34)}</code>.</p><h3 id="generator-function" tabindex="-1"><a class="header-anchor" href="#generator-function" aria-hidden="true">#</a> Generator function</h3><p>Instead of a number or string, a generator function can be passed in, either by itself or in an object with the key <code>gen</code>:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">generator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">yield</span> i<span class="token punctuation">;</span>\n        i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nfr<span class="token punctuation">.</span><span class="token function">sequence</span><span class="token punctuation">(</span><span class="token string">&quot;plus2&quot;</span><span class="token punctuation">,</span> generator<span class="token punctuation">)</span><span class="token punctuation">;</span>\nfr<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token string">&quot;plus2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 0</span>\nfr<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token string">&quot;plus2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 2</span>\n\nfr<span class="token punctuation">.</span><span class="token function">sequence</span><span class="token punctuation">(</span><span class="token string">&quot;+2&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>gen<span class="token operator">:</span> generator<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfr<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token string">&quot;+2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 0</span>\nfr<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token string">&quot;+2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>If the desired generator function takes arguments, it must be passed in wrapped in a function:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">generator</span><span class="token punctuation">(</span>initial<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> i <span class="token operator">=</span> initial<span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">yield</span> i<span class="token punctuation">;</span>\n        i <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nfr<span class="token punctuation">.</span><span class="token function">sequence</span><span class="token punctuation">(</span><span class="token string">&quot;double&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">generator</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfr<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token string">&quot;double&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 3</span>\nfr<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token string">&quot;double&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 6</span>\n\nfr<span class="token punctuation">.</span><span class="token function">sequence</span><span class="token punctuation">(</span><span class="token string">&quot;double&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token function-variable function">gen</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">generator</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfr<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token string">&quot;double&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 3</span>\nfr<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token string">&quot;double&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 6</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="aliases" tabindex="-1"><a class="header-anchor" href="#aliases" aria-hidden="true">#</a> Aliases</h3><p>Global sequences can be given aliases, just like fixtures. The aliases point to the same generator, so they increment together:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>fr<span class="token punctuation">.</span><span class="token function">sequence</span><span class="token punctuation">(</span><span class="token string">&quot;plus2&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>aliases<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;double&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;increaser&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\nfr<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token string">&quot;plus2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 1</span>\nfr<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token string">&quot;double&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 2</span>\nfr<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token string">&quot;increaser&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="callbacks" tabindex="-1"><a class="header-anchor" href="#callbacks" aria-hidden="true">#</a> Callbacks</h3><p>Sequences can take a callback, which is where their true power lies:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>fr<span class="token punctuation">.</span><span class="token function">sequence</span><span class="token punctuation">(</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">test</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">@domain.com</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfr<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// test1@domain.com</span>\nfr<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// test2@domain.com</span>\n\nfr<span class="token punctuation">.</span><span class="token function">sequence</span><span class="token punctuation">(</span><span class="token string">&quot;email2&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">test</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">@domain.com</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfr<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token string">&quot;email2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// test1@domain.com</span>\nfr<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token string">&quot;email2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// test2@domain.com</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="combining-options" tabindex="-1"><a class="header-anchor" href="#combining-options" aria-hidden="true">#</a> Combining options</h3><p>All of the options can be passed in as an object:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>fr<span class="token punctuation">.</span><span class="token function">sequence</span><span class="token punctuation">(</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>initial<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> aliases<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;super email&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">test</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">@domain.com</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfr<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token string">&quot;super email&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// test100@domain.com</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>If the options aren&#39;t bundled in an object, they must be ordered: initial value or generator, aliases, callback:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>fr<span class="token punctuation">.</span><span class="token function">sequence</span><span class="token punctuation">(</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>aliases<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;super email&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">test</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">@domain.com</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfr<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token string">&quot;super email&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// test100@domain.com</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',30),k={render:function(n,s){const a=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[p,(0,t._)("p",null,[e,(0,t._)("a",o,[c,(0,t.Wm)(a)]),u,l,i]),r],64)}}}}]);